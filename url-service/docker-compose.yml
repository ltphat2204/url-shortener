services:
  url-service:
    build:
      context: ./
    container_name: url-service
    env_file:
      - .env.production
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - url-shortener-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.url-service.rule=Host(`localhost`) && PathPrefix(`/url`)"
      - "traefik.http.routers.url-service.entrypoints=web"
      - "traefik.http.services.url-service.loadbalancer.server.port=3000"
    restart: unless-stopped

  mongodb:
    image: mongo:latest
    container_name: mongodb
    networks:
      - url-shortener-net
    volumes:
      - mongodb_data:/data/db
    command: ["--replSet", "rs0", "--bind_ip_all"]
    healthcheck:
      test: "mongosh --host mongodb:27017 --eval 'db.adminCommand(\"ping\")' || exit 1"
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  mongo-init:
    image: mongo:latest
    depends_on:
      mongodb:
        condition: service_healthy
    restart: "no"
    networks:
      - url-shortener-net
    command: >
      mongosh --host mongodb:27017 --eval
      '
        try {
          rs.status();
          console.log("Replica set already initialized.");
        } catch (e) {
          console.log("Initializing replica set...");
          rs.initiate({
            _id: "rs0",
            members: [{ _id: 0, host: "mongodb:27017" }]
          });
          console.log("Replica set initialized.");
        }
        let primary = false;
        for (let i = 0; i < 30; i++) {
          if (rs.status().members.some(m => m.stateStr === "PRIMARY")) {
            primary = true;
            console.log("Primary found!");
            break;
          }
          console.log("Waiting for primary...");
          sleep(1000);
        }
        if (!primary) throw "Could not find primary";
        const adminDb = db.getSiblingDB("admin");
        if (!adminDb.system.users.findOne({ user: "root" })) {
          console.log("Creating root user...");
          adminDb.createUser({
            user: "root",
            pwd: "password",
            roles: [{ role: "root", db: "admin" }]
          });
          console.log("Root user created.");
        } else {
          console.log("Root user already exists.");
        }
      '

volumes:
  mongodb_data:

networks:
  url-shortener-net:
    external: true